[{"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\index.js":"1","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\App.js":"2","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\reportWebVitals.js":"3","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\Main.jsx":"4","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\components\\NavBar.jsx":"5","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\pages\\Home.jsx":"6","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\pages\\Student.jsx":"7","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\pages\\Teacher.jsx":"8","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\components\\SpeechButton.jsx":"9","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\components\\AttendancePieChart.jsx":"10","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\components\\Notification.jsx":"11","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\components\\EmotionLeaderBoard.jsx":"12"},{"size":500,"mtime":1611423055072,"results":"13","hashOfConfig":"14"},{"size":294,"mtime":1611441341642,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":640,"mtime":1611480710628,"results":"17","hashOfConfig":"14"},{"size":679,"mtime":1611443079858,"results":"18","hashOfConfig":"14"},{"size":1702,"mtime":1611481761588,"results":"19","hashOfConfig":"14"},{"size":9864,"mtime":1611477803551,"results":"20","hashOfConfig":"14"},{"size":3168,"mtime":1611486074063,"results":"21","hashOfConfig":"14"},{"size":671,"mtime":1611476618588,"results":"22","hashOfConfig":"14"},{"size":1108,"mtime":1611456675018,"results":"23","hashOfConfig":"14"},{"size":773,"mtime":1611485745005,"results":"24","hashOfConfig":"14"},{"size":1446,"mtime":1611485945134,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"oxb3hm",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\index.js",[],["52","53"],"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\App.js",[],"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\reportWebVitals.js",[],"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\Main.jsx",[],"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\components\\NavBar.jsx",[],"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\pages\\Home.jsx",[],"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\pages\\Student.jsx",["54","55","56"],"import React, { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { ImageCapture } from 'image-capture';\r\nimport { render } from 'react-dom';\r\nimport SpeechButton from '../components/SpeechButton';\r\n\r\n\r\nclass Student extends React.Component{\r\n    videoRef = React.createRef();\r\n    sendIntervalObject = null;\r\n    userId = Math.floor(Math.random() * 10000);\r\n\r\n    sendCurrentData = () => {\r\n        var dataToSend = {main_emotion: this.state.maxEmotion, id: this.userId};\r\n        if (this.state.muteMessage === true){\r\n            dataToSend[\"active_command\"] = \"muted\";\r\n        }\r\n        else if (this.state.cannotSeeSlidesMessage === true){\r\n            dataToSend[\"active_command\"] = \"no_slides\"\r\n        }\r\n        else if (this.state.internetConnectionMessage === true){\r\n            dataToSend[\"active_command\"] = \"slow_internet\";\r\n        }\r\n        else if (this.state.slowDownMessage === true){\r\n            dataToSend[\"active_command\"] = \"slow_down\";\r\n        }\r\n        else if (this.state.confusedMessage === true){\r\n            dataToSend[\"active_command\"] = \"confused\";\r\n        }\r\n        axios({method: \"post\",\r\n              data: dataToSend,\r\n              url: \"./send_data\"})\r\n        .then(data => {console.log(JSON.stringify(data))})\r\n    }\r\n\r\n    sendFaceAtIntervals = (imageCapture) => {\r\n        const url = \"./image_analysis\"\r\n        const canvas = document.createElement('canvas');\r\n        var intervalObject = setInterval(() => {\r\n            imageCapture.grabFrame()\r\n            .then(img => {\r\n                console.log(img); // ImageBitmap\r\n                return new Promise(res => {\r\n                  // resize it to the size of our ImageBitmap\r\n                  canvas.width = img.width;\r\n                  canvas.height = img.height;\r\n                  // try to get a bitmaprenderer context\r\n                  let ctx = canvas.getContext('bitmaprenderer');\r\n                  if(ctx) {\r\n                    // transfer the ImageBitmap to it\r\n                    ctx.transferFromImageBitmap(img);\r\n                  }\r\n                  else {\r\n                    // in case someone supports createImageBitmap only\r\n                    // twice in memory...\r\n                    canvas.getContext('2d').drawImage(img,0,0);\r\n                  }\r\n                  // get it back as a Blob\r\n                  canvas.toBlob(res);\r\n                });\r\n              })\r\n            .then(blobData => {\r\n               axios({\r\n                method: \"post\",\r\n                url: url,\r\n                // contentType: \"application/octet-stream\",\r\n                headers:{\r\n                    \"content-type\":\"application/octet-stream\",\r\n                },\r\n                data: blobData\r\n               })\r\n               .then(data => {\r\n                  console.log(JSON.stringify(data));\r\n                  this.setState({maxEmotion: data.data.max_emotion});\r\n                  this.sendCurrentData();\r\n              })\r\n              //  .catch(function(err) {\r\n              //     console.log(JSON.stringify(err));\r\n              // })\r\n           });\r\n        }, 3000);\r\n        return intervalObject;\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {maxEmotion: \"absent\",\r\n                      muteMessage: false,\r\n                      confusedMessage: false,\r\n                      slowDownMessage: false,\r\n                      internetConnectionMessage: false,\r\n                      cannotSeeSlidesMessage: false\r\n                      };\r\n    }\r\n\r\n    componentDidMount(){\r\n        if (navigator.mediaDevices.getUserMedia) {\r\n            navigator.mediaDevices.getUserMedia({video: {facingMode: \"user\"}})\r\n        .then(stream => {\r\n            this.videoRef.current.srcObject = stream;\r\n\r\n            const mediaStreamTrack = stream.getVideoTracks()[0];\r\n            const imageCapture = new ImageCapture(mediaStreamTrack);\r\n            this.sendIntervalObject = this.sendFaceAtIntervals(imageCapture);\r\n        })\r\n        .catch(err0r => {\r\n            console.log(err0r);\r\n            console.log(\"Something went wrong 2!\");\r\n        });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        if (this.sendIntervalObject != null){\r\n            console.log(\"Unmounting\")\r\n            this.videoRef.current.srcObject.getTracks().forEach((track) => track.stop())\r\n            clearInterval(this.sendIntervalObject);\r\n        }\r\n    }\r\n\r\n    flipState = (state) => {\r\n        return () =>{\r\n            var newDict = {};\r\n            newDict[state] = !this.state[state];\r\n            this.setState(newDict);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const items = [];\r\n        var emotionMap = {\"neutral\": \"ðŸ™‚ Neutral\",\r\n                          \"anger\": \"ðŸ˜¡ Anger\",\r\n                          \"contempt\": \"ðŸ˜’ Contempt\",\r\n                          \"disgust\": \"ðŸ¤¢ Disgust\",\r\n                          \"fear\": \"ðŸ˜¨ Fear\",\r\n                          \"happiness\": \"ðŸ˜„ Happiness\",\r\n                          \"sadness\": \"ðŸ˜¢ Sadness\",\r\n                          \"surprise\": \"ðŸ˜® Surprise\",\r\n                          \"absent\": \"Unknown\"}\r\n        const devices = [\"Front camera\", \"Back camera\"];\r\n\r\n        // console.log(\"test\", navigator.mediaDevices\r\n        //     .enumerateDevices())\r\n\r\n        // const devices = navigator.mediaDevices\r\n        // .enumerateDevices();\r\n\r\n        // for(const [index, value] in devices){\r\n        //     var mediaDevice = devices[index];\r\n        //     if (mediaDevice.kind === 'videoinput') {\r\n        //         items.push(<option>{mediaDevice.label}</option>)\r\n        //     }\r\n        // }\r\n\r\n        return (\r\n            <>\r\n            <h1 className=\"text-center mb-3 mb-lg-5\">Class: Algebra 28/01/2021</h1>\r\n\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-6\">\r\n                        <div>\r\n                            <div className=\"bg-secondary p-2\">\r\n                                Only you can see this video stream\r\n                            </div>\r\n                            <div id=\"container\">\r\n                                <video autoPlay playsInline id=\"videoElement\" className=\"webcam-feed bg-dark\" ref={this.videoRef}>\r\n                                </video>\r\n                            </div>\r\n                        </div>\r\n                        <select className=\"form-select form-select-lg\">\r\n                            {devices.map((value, index) => {\r\n                                return <option>{value}</option>\r\n                            })}\r\n                            {/* {items} */}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-lg-6 mt-3 mt-lg-0\">\r\n                        <div>\r\n                            <h2>\r\n                                Your data\r\n                            </h2>\r\n                            <div>\r\n                                This is the data being anonymously sent to your teacher which will be aggregated with everyone from your class\r\n                            </div>\r\n                            <div className=\"row mt-4 mb-5\">\r\n                                <div className=\"col-6\">\r\n                                    <div className=\"data-item\">\r\n                                        <div className=\"data__title\">\r\n                                            Attendance\r\n                                        </div>\r\n                                        <div className=\"data__value\">\r\n                                            {this.state.maxEmotion === \"absent\" ? \"ðŸ‘» Lost\" : \"âœ” Present\"}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-6\">\r\n                                    <div className=\"data-item\">\r\n                                        <div className=\"data__title\">\r\n                                            Emotion\r\n                                        </div>\r\n                                        <div className=\"data__value\">\r\n                                            {emotionMap[this.state.maxEmotion]}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mt-3 divider-top pt-4\">\r\n                            <h2>\r\n                                Raise an issue\r\n                            </h2>\r\n                            <div className=\"pb-4\">\r\n                                Let your teacher know something is wrong\r\n                            </div>\r\n                            <SpeechButton id=\"SB1\" text=\"You're on mute\" isActive={!this.state.muteMessage} flipState={this.flipState(\"muteMessage\")}/>\r\n                            <SpeechButton id=\"SB2\" text=\"I'm really confused\" isActive={!this.state.confusedMessage} flipState={this.flipState(\"confusedMessage\")}/>\r\n                            <SpeechButton id=\"SB3\" text=\"Please slow down\" isActive={!this.state.slowDownMessage} flipState={this.flipState(\"slowDownMessage\")}/>\r\n                            <SpeechButton id=\"SB4\" text=\"There's a bad internet connection\" isActive={!this.state.internetConnectionMessage} flipState={this.flipState(\"internetConnectionMessage\")}/>\r\n                            <SpeechButton id=\"SB5\" text=\"I can't see the slides\" isActive={!this.state.cannotSeeSlidesMessage} flipState={this.flipState(\"cannotSeeSlidesMessage\")}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Student;\r\n","C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\pages\\Teacher.jsx",[],"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\components\\SpeechButton.jsx",[],"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\components\\AttendancePieChart.jsx",["57"],"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\components\\Notification.jsx",[],"C:\\Users\\emma_\\Repos\\ReadTheRoom\\read-the-room\\src\\components\\EmotionLeaderBoard.jsx",["58","59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":26},{"ruleId":"64","severity":1,"message":"68","line":4,"column":10,"nodeType":"66","messageId":"67","endLine":4,"endColumn":16},{"ruleId":"64","severity":1,"message":"69","line":130,"column":15,"nodeType":"66","messageId":"67","endLine":130,"endColumn":20},{"ruleId":"70","severity":1,"message":"71","line":6,"column":3,"nodeType":"72","messageId":"73","endLine":8,"endColumn":4},{"ruleId":"70","severity":1,"message":"71","line":5,"column":3,"nodeType":"72","messageId":"73","endLine":7,"endColumn":4},{"ruleId":"64","severity":1,"message":"74","line":24,"column":17,"nodeType":"66","messageId":"67","endLine":24,"endColumn":20},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'render' is defined but never used.","'items' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'key' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]