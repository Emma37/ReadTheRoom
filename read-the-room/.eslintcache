[{"/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/index.js":"1","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/reportWebVitals.js":"2","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/App.js":"3","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/Main.jsx":"4","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/components/NavBar.jsx":"5","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/pages/Home.jsx":"6","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/pages/Teacher.jsx":"7","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/pages/Student.jsx":"8","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/components/AttendancePieChart.jsx":"9","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/components/Notification.jsx":"10","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/components/EmotionLeaderBoard.jsx":"11","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/components/SpeechButton.jsx":"12"},{"size":500,"mtime":1611423757238,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1611417755605,"results":"15","hashOfConfig":"14"},{"size":294,"mtime":1611445166870,"results":"16","hashOfConfig":"14"},{"size":621,"mtime":1611484213217,"results":"17","hashOfConfig":"14"},{"size":656,"mtime":1611445166873,"results":"18","hashOfConfig":"14"},{"size":1659,"mtime":1611504727772,"results":"19","hashOfConfig":"14"},{"size":5496,"mtime":1611505219325,"results":"20","hashOfConfig":"14"},{"size":14380,"mtime":1611504727773,"results":"21","hashOfConfig":"14"},{"size":1128,"mtime":1611505345526,"results":"22","hashOfConfig":"14"},{"size":748,"mtime":1611486739830,"results":"23","hashOfConfig":"14"},{"size":1391,"mtime":1611484100372,"results":"24","hashOfConfig":"14"},{"size":645,"mtime":1611495112322,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"xd1tc9",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/index.js",[],["54","55"],"/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/reportWebVitals.js",[],"/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/App.js",[],"/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/Main.jsx",[],"/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/components/NavBar.jsx",[],"/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/pages/Home.jsx",[],"/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/pages/Teacher.jsx",["56"],"import React from 'react';\nimport AttendancePieChart from '../components/AttendancePieChart';\nimport EmotionLeaderBoard from '../components/EmotionLeaderBoard';\nimport SimpleNotification from '../components/Notification';\nimport axios from 'axios';\n\n\nclass Teacher extends React.Component{\n    checkDataIntervalObject = null\n    emotionMap = {\"neutral\": \"ðŸ™‚ Neutral\",\n                  \"anger\": \"ðŸ˜¡ Anger\",\n                  \"contempt\": \"ðŸ˜’ Contempt\",\n                  \"disgust\": \"ðŸ¤¢ Disgust\",\n                  \"fear\": \"ðŸ˜¨ Fear\",\n                  \"happiness\": \"ðŸ˜„ Happiness\",\n                  \"sadness\": \"ðŸ˜¢ Sadness\",\n                  \"surprise\": \"ðŸ˜® Surprise\",\n                  \"confused\": \"ðŸ¤” Confused\",\n                  \"absent\": \"Unknown\"}\n    keys = [\"neutral\", \"anger\", \"contempt\", \"disgust\", \"fear\", \"happiness\", \"sadness\", \"surprise\", \"confused\"]\n    absentColor = \"#696773\"\n    presentColor = \"#009fb7\"\n    messagesMap = {\"muted\": \"You may be muted.\",\n                   \"no_slides\": \"Your slides can't be seen.\",\n                   \"slow_internet\": \"Your image quality seems to be degraded.\",\n                   \"slow_down\": \"You may be going too fast.\",\n                   \"confused\": \"Your students are confused.\"}\n    messageKeys = [\"muted\", \"no_slides\", \"slow_internet\", \"slow_down\", \"confused\"]\n\n    constructor(props) {\n        super(props);\n        var data =\n            {\"ðŸ˜¡ Anger\": 0,\n            \"ðŸ˜’ Contempt\": 0,\n            \"ðŸ¤¢ Disgust\": 0,\n            \"ðŸ˜¨ Fear\": 0,\n            \"ðŸ˜„ Happiness\": 0,\n            \"ðŸ™‚ Neutral\": 0,\n            \"ðŸ˜¥ Sadness\": 0,\n            \"ðŸ˜® Surprise\": 0,\n            \"ðŸ¤” Confused\": 0,\n        };\n        var mockAttendanceData = [{title: \"Absent\", value: 1,\n                                   color: this.absentColor}]\n        this.state = {emotionsData: data, attendanceData: mockAttendanceData};\n    }\n\n    checkDataAtIntervals = () => {\n        var intervalObject = setInterval(() => {\n            // Get stuff\n            axios({method: \"get\",\n              url: \"./current_data\"})\n            .then(data => {\n                // Handle emotions\n                var givenData = data.data;\n                var newData = {};\n                var presentStudents = 0;\n                this.keys.forEach(key => {\n                    console.log(key);\n                    if (key in givenData.users){\n                        newData[this.emotionMap[key]] = givenData.users[key];\n                        presentStudents += givenData.users[key];\n                    }\n                    else{\n                        newData[this.emotionMap[key]] = 0;\n                    }\n                })\n\n                // Handle absence\n                var absentStudents = 0;\n                var attendanceData = [];\n                if (\"absent\" in givenData.users){\n                    absentStudents += givenData.users.absent;\n                }\n                if (presentStudents === 0){\n                    attendanceData = [{title: \"Absent\", value: 1, color: this.absentColor}];\n                }\n                else if (absentStudents === 0){\n                    attendanceData = [{title: \"Present\", value: presentStudents, color: this.presentColor}];\n                }\n                else{\n                    attendanceData = [{title: \"Absent\", value: absentStudents, color: this.absentColor},\n                                      {title: \"Present\", value: presentStudents, color: this.presentColor}]\n                }\n\n                this.setState({emotionsData: newData, attendanceData: attendanceData});\n\n                // Handle messages\n                var maxCount = 0;\n                var maxMessage = null;\n                this.messageKeys.forEach(key => {\n                    if (key in givenData.commands && givenData.commands[key] > maxCount){\n                        maxCount = givenData.commands[key];\n                        maxMessage = key;\n                    }\n                })\n                if (maxMessage != null){\n                    new Notification('Read the Room: ' + this.messagesMap[maxMessage]);\n                }\n            })\n        }, 3000);\n        return intervalObject;\n    }\n\n    componentDidMount(){\n        this.checkDataIntervalObject = this.checkDataAtIntervals();\n        if (!(\"Notification\" in window)) {\n          console.log(\"This browser does not support desktop notification\");\n        } else {\n          Notification.requestPermission();\n        }\n    }\n\n    componentWillUnmount(){\n        if (this.checkDataIntervalObject != null){\n            clearInterval(this.checkDataInterval);\n        }\n    }\n\n    render(){\n        return (\n            <>\n            <div className=\"text-center mb-3 mb-lg-5\">\n                <h1>Class: Algebra 28/01/2021</h1>\n                <div>Session key: silly-ferret-feet</div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-lg-6\">\n                    <h2>Emotional Engagement</h2>\n                    <div>See what emotions your students are showing</div>\n                    <EmotionLeaderBoard data={this.state.emotionsData}/>\n                </div>\n                <div class=\"col-lg-6 mt-5 mt-lg-0\">\n                    <h2>Attendance</h2>\n                    <div>Check the class attendance</div>\n                    <AttendancePieChart attendanceData={this.state.attendanceData}/>\n                </div>\n            </div>\n        </>\n    )\n  }\n}\n\nexport default Teacher;\n","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/pages/Student.jsx",["57","58","59","60"],"import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport { ImageCapture } from 'image-capture';\nimport { render } from 'react-dom';\nimport SpeechButton from '../components/SpeechButton';\n\n\nclass Student extends React.Component{\n    videoRef = React.createRef();\n    sendIntervalObject = null;\n    userId = Math.floor(Math.random() * 10000);\n    canvas = document.createElement('canvas');\n\n    browserName = (function(){\n        var ua= navigator.userAgent, tem,\n        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n        if(/trident/i.test(M[1])){\n            tem=  /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n            return 'IE '+(tem[1] || '');\n        }\n        if(M[1]=== 'Chrome'){\n            tem= ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\n            if(tem!= null) return tem.slice(1).join(' ').replace('OPR', 'Opera');\n        }\n        M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];\n        if((tem= ua.match(/version\\/(\\d+)/i))!= null) M.splice(1, 1, tem[1]);\n        return M.join(' ');\n    })();\n\n    sendCurrentData = () => {\n        var dataToSend = {main_emotion: this.state.maxEmotion, id: this.userId};\n        if (this.state.muteMessage === true){\n            dataToSend[\"active_command\"] = \"muted\";\n        }\n        else if (this.state.cannotSeeSlidesMessage === true){\n            dataToSend[\"active_command\"] = \"no_slides\"\n        }\n        else if (this.state.internetConnectionMessage === true){\n            dataToSend[\"active_command\"] = \"slow_internet\";\n        }\n        else if (this.state.slowDownMessage === true){\n            dataToSend[\"active_command\"] = \"slow_down\";\n        }\n        else if (this.state.confusedMessage === true){\n            dataToSend[\"active_command\"] = \"confused\";\n        }\n        axios({method: \"post\",\n              data: dataToSend,\n              url: \"./send_data\"})\n        .then(data => {console.log(JSON.stringify(data))})\n    }\n\n    captureImage = (imageCapture) => {\n        if (this.browserName.includes(\"Safari\")){\n            return imageCapture.takePhoto()\n        }\n        else{\n            return (imageCapture.grabFrame()\n                   .then(img => {\n                        console.log(img); // ImageBitmap\n                        return new Promise(res => {\n                          // resize it to the size of our ImageBitmap\n                          this.canvas.width = img.width;\n                          this.canvas.height = img.height;\n                          // try to get a bitmaprenderer context\n                          let ctx = this.canvas.getContext('bitmaprenderer');\n                          if(ctx) {\n                            // transfer the ImageBitmap to it\n                            ctx.transferFromImageBitmap(img);\n                          }\n                          else {\n                            // in case someone supports createImageBitmap only\n                            // twice in memory...\n                            this.canvas.getContext('2d').drawImage(img,0,0);\n                          }\n                          // get it back as a Blob\n                          this.canvas.toBlob(res);\n                        });\n                      }))\n        }\n    }\n\n    sendFaceAtIntervals = () => {\n        const url = \"./image_analysis\"\n        var intervalObject = setInterval(() => {\n            if (!this.state.overridingDisabled){\n                const mediaStreamTrack = this.state.currentStream.getVideoTracks()[0];\n                const imageCapture = new ImageCapture(mediaStreamTrack);\n                this.captureImage(imageCapture)\n                .then(blobData => {\n                   axios({\n                    method: \"post\",\n                    url: url,\n                    // contentType: \"application/octet-stream\",\n                    headers:{\n                        \"content-type\":\"application/octet-stream\",\n                    },\n                    data: blobData\n                   })\n                   .then(data => {\n                      console.log(JSON.stringify(data));\n                      // Have to do this check again in case the request come back after\n                      // the user's overridden.\n                      if (!this.state.overridingDisabled){\n                        this.setState({maxEmotion: data.data.max_emotion});\n                      }\n                      this.sendCurrentData();\n                  })\n                });\n            }\n            else{\n                console.log(\"Skipped checking for a new face\");\n                this.sendCurrentData();\n            }\n        }, 3000);\n        return intervalObject;\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {maxEmotion: \"absent\",\n                      muteMessage: false,\n                      confusedMessage: false,\n                      slowDownMessage: false,\n                      internetConnectionMessage: false,\n                      cannotSeeSlidesMessage: false,\n                      showOverrideSection: false,\n                      cameraOptions: [],\n                      overridingDisabled: false,\n                      overridingEmotion: \"neutral\",\n                      currentStream: null\n                      };\n    }\n\n    gotDevices = (mediaDevices) => {\n        let count = 1;\n        var newCameraOptions = [];\n        mediaDevices.forEach(mediaDevice => {\n            if (mediaDevice.kind === 'videoinput') {\n              const value = mediaDevice.deviceId;\n              const label = mediaDevice.label || `Camera ${count++}`;\n              newCameraOptions.push(<option value={value}>{label}</option>);\n            }\n        });\n\n        this.setState({cameraOptions: newCameraOptions});\n        console.log(this.state.cameraOptions);\n    }\n\n\n\n    stopMediaTracks = (stream) => {\n        stream.getTracks().forEach(track => {\n          track.stop();\n        });\n    }\n\n    handleChange = (e) => {\n        if (typeof currentStream !== 'undefined') {\n            this.stopMediaTracks(this.state.currentStream);\n          }\n        const videoConstraints = {};\n        if (e.target.value === '') {\n            videoConstraints.facingMode = 'environment';\n        } else {\n            videoConstraints.deviceId = { exact: e.target.value };\n        }\n        const constraints = {\n            video: videoConstraints,\n            audio: false\n        };\n\n        navigator.mediaDevices\n        .getUserMedia(constraints)\n        .then(stream => {\n        this.setState({currentStream: stream});\n        this.videoRef.current.srcObject = stream;\n        return navigator.mediaDevices.enumerateDevices();\n        })\n        .then(this.gotDevices)\n        .catch(error => {\n        console.error(error);\n        });\n\n        console.log(\"test\", this.state.currentStream);\n    }\n\n    componentDidMount(){\n\n        navigator.mediaDevices.enumerateDevices().then(this.gotDevices);\n\n        if (navigator.mediaDevices.getUserMedia) {\n            navigator.mediaDevices.getUserMedia({video: {facingMode: \"user\"}})\n        .then(stream => {\n            this.videoRef.current.srcObject = stream;\n            this.setState({currentStream: stream});\n            this.sendIntervalObject = this.sendFaceAtIntervals();\n        })\n        .catch(err0r => {\n            console.log(err0r);\n            console.log(\"Something went wrong 2!\");\n        });\n        }\n    }\n\n    componentWillUnmount(){\n        if (this.sendIntervalObject != null){\n            console.log(\"Unmounting\")\n            this.videoRef.current.srcObject.getTracks().forEach((track) => track.stop())\n            clearInterval(this.sendIntervalObject);\n        }\n    }\n\n    flipState = (state) => {\n        return () =>{\n            var newDict = {};\n            newDict[state] = !this.state[state];\n            this.setState(newDict);\n        }\n    }\n\n    overrideEmotion = () => {\n        this.setState({ showOverrideSection: false, overridingDisabled: true });\n        setTimeout(() => {this.setState({ overridingDisabled: false })}, 10000);\n        const newValue = this.state.overridingEmotion;\n        this.setState({overridingEmotion: \"neutral\"});\n        console.log(newValue);\n        this.setState({maxEmotion: newValue});\n    }\n\n    render(){\n        const items = [];\n        var emotionMap = {\"neutral\": \"ðŸ™‚ Neutral\",\n                          \"anger\": \"ðŸ˜¡ Anger\",\n                          \"contempt\": \"ðŸ˜’ Contempt\",\n                          \"disgust\": \"ðŸ¤¢ Disgust\",\n                          \"fear\": \"ðŸ˜¨ Fear\",\n                          \"happiness\": \"ðŸ˜„ Happiness\",\n                          \"sadness\": \"ðŸ˜¢ Sadness\",\n                          \"surprise\": \"ðŸ˜® Surprise\",\n                          \"confused\": \"ðŸ¤” Confused\",\n                          \"absent\": \"ðŸ‘» Not Detected\"}\n        const devices = [\"Front camera\", \"Back camera\"];\n\n        // console.log(\"test\", navigator.mediaDevices\n        //     .enumerateDevices())\n\n        // const devices = navigator.mediaDevices\n        // .enumerateDevices();\n\n        // for(const [index, value] in devices){\n        //     var mediaDevice = devices[index];\n        //     if (mediaDevice.kind === 'videoinput') {\n        //         items.push(<option>{mediaDevice.label}</option>)\n        //     }\n        // }\n\n        const OverrideButton =\n                <button className=\"btn btn-secondary\" onClick={() => this.setState({ showOverrideSection: true })} disabled={ this.state.overridingDisabled }>\n                    <span className=\"override-button\">\n                        <span className=\"override-button__icon\">âš </span>\n                        <span>The detected emotion is incorrect</span>\n                    </span>\n                </button>\n        ;\n\n        const OverrideSection =\n            <>\n                <div className=\"d-flex\">\n                    <select className=\"form-select form-select-lg mt-3\" onChange={ (e) => {this.setState({overridingEmotion: e.target.value})} }>\n                    {\n                        Object.keys(emotionMap).map((key, index) => (\n                            key === \"absent\" ? null : <option key={index} value={key}>{emotionMap[key]}</option>\n                        ))\n                    }\n                    </select>\n                    <button className=\"btn btn-primary mt-3 ml-3\" onClick={ this.overrideEmotion }>Submit</button>\n                </div>\n            </>\n        ;\n\n\n        return (\n            <>\n            <h1 className=\"text-center mb-3 mb-lg-5\">Class: Algebra 28/01/2021</h1>\n\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-lg-6\">\n                        <div className=\"webcam-feed\">\n                            <div className=\"bg-secondary p-2 webcam-feed__notice\">\n                                Only you can see this video stream\n                            </div>\n                            <div id=\"container\">\n                                <video autoPlay playsInline id=\"videoElement\" className=\"webcam-feed bg-dark\" ref={this.videoRef}>\n                                </video>\n                            </div>\n                        </div>\n                        <select className=\"form-select form-select-lg\"  onChange={this.handleChange}>\n                            {this.state.cameraOptions}\n                        </select>\n                    </div>\n                    <div className=\"col-lg-6 mt-3 mt-lg-0\">\n                        <div>\n                            <h2>\n                                Your data\n                            </h2>\n                            <div>\n                                This is the data being anonymously sent to your teacher which will be aggregated with everyone from your class\n                            </div>\n                            <div className=\"row mt-4 mb-4 align-items-center\">\n                                <div className=\"col-lg-6\">\n                                    <div className=\"data-item\">\n                                        <div className=\"data__title\">\n                                            Reported Emotion\n                                        </div>\n                                        <div className=\"data__value\">\n                                            {emotionMap[this.state.maxEmotion]}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"col-lg-6 mt-3 mt-lg-0\">\n                                    { this.state.showOverrideSection ? null : OverrideButton }\n                                </div>\n                                { this.state.showOverrideSection ? OverrideSection : null }\n                            </div>\n                        </div>\n                        <div className=\"mt-3 divider-top pt-4\">\n                            <h2>\n                                Raise an issue\n                            </h2>\n                            <div className=\"pb-4\">\n                                Let your teacher know something is wrong\n                            </div>\n                            <div className=\"speech-button__container\">\n                                <SpeechButton id=\"SB1\" text=\"You're on mute\" isActive={!this.state.muteMessage} flipState={this.flipState(\"muteMessage\")}/>\n                                <SpeechButton id=\"SB2\" text=\"I'm really confused\" isActive={!this.state.confusedMessage} flipState={this.flipState(\"confusedMessage\")}/>\n                                <SpeechButton id=\"SB3\" text=\"Please slow down\" isActive={!this.state.slowDownMessage} flipState={this.flipState(\"slowDownMessage\")}/>\n                                <SpeechButton id=\"SB4\" text=\"There's a bad internet connection\" isActive={!this.state.internetConnectionMessage} flipState={this.flipState(\"internetConnectionMessage\")}/>\n                                <SpeechButton id=\"SB5\" text=\"I can't see the slides\" isActive={!this.state.cannotSeeSlidesMessage} flipState={this.flipState(\"cannotSeeSlidesMessage\")}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n\n\n            </>\n        )\n    }\n}\n\nexport default Student;\n","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/components/AttendancePieChart.jsx",["61"],"/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/components/Notification.jsx",[],"/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/components/EmotionLeaderBoard.jsx",["62","63"],"import React from 'react';\n\nclass EmotionLeaderBoard extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    // update with values from props\n    // var data =\n    //     { \"ðŸ˜¡ Anger\": 1,\n    //     \"ðŸ˜’ Contempt\": 1,\n    //     \"ðŸ¤¢ Disgust\": 2,\n    //     \"ðŸ˜¨ Fear\": 0,\n    //     \"ðŸ˜„ Happiness\": 8,\n    //     \"ðŸ™‚ Neutral\": 15,\n    //     \"ðŸ˜¥ Sadness\": 1,\n    //     \"ðŸ˜® Surprise\": 0\n    // };\n\n    var total = 0;\n\n    for (const [key, value] of Object.entries(this.props.data)) {\n        total += value;\n      }\n\n    var itemArray = Object.keys(this.props.data).map((key) => {\n        return [key, this.props.data[key]];\n      });\n\n    itemArray.sort(function(first, second) {\n    return second[1] - first[1];\n    });\n\n    console.log(itemArray)\n\n    return (\n      <div>\n          <ul className=\"emotion-leaderboard\">\n          {/* {Object.keys(data).map((key, index) => (\n          <li key={index} style={{fontSize: (Math.max(5, data[key])/total)*6 +'rem'}}>{key} ({data[key]})</li>\n            ))\n        } */}\n\n            {itemArray.map((value, index) => {\n                            return <li className=\"mb-3\" style={{fontSize: Math.min(Math.max(value[1]+1 / (total + 1), 0.5) * 1.5, 6) +'rem'}}>{value[0]} ({value[1]})</li>\n                        })}\n          </ul>\n      </div>\n    )\n  }\n};\n\nexport default EmotionLeaderBoard;\n","/Users/taketomo/Library/Mobile Documents/com~apple~CloudDocs/developement projects/ReadTheRoom/read-the-room/src/components/SpeechButton.jsx",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":26},{"ruleId":"68","severity":1,"message":"72","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":26},{"ruleId":"68","severity":1,"message":"73","line":4,"column":10,"nodeType":"70","messageId":"71","endLine":4,"endColumn":16},{"ruleId":"68","severity":1,"message":"74","line":232,"column":15,"nodeType":"70","messageId":"71","endLine":232,"endColumn":20},{"ruleId":"68","severity":1,"message":"75","line":243,"column":15,"nodeType":"70","messageId":"71","endLine":243,"endColumn":22},{"ruleId":"76","severity":1,"message":"77","line":6,"column":3,"nodeType":"78","messageId":"79","endLine":8,"endColumn":4},{"ruleId":"76","severity":1,"message":"77","line":5,"column":3,"nodeType":"78","messageId":"79","endLine":7,"endColumn":4},{"ruleId":"68","severity":1,"message":"80","line":24,"column":17,"nodeType":"70","messageId":"71","endLine":24,"endColumn":20},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'SimpleNotification' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'render' is defined but never used.","'items' is assigned a value but never used.","'devices' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'key' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]